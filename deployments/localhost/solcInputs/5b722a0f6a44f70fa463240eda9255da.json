{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./PriceConverter.sol\";\n\nerror FundMe__NotOwner();\n\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    uint256 private immutable i_minUSD;\n    address private immutable i_owner;\n    address[] public s_funders;\n    mapping(address => uint256) private s_addressAmountMap;\n    AggregatorV3Interface private immutable i_priceFeed;\n\n    modifier onlyOwner() {\n        // require(msg.sender == i_owner, \"You are not the owner\");\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\n        _;\n    }\n\n    constructor(uint256 _minUSD, address _priceFeedAddress) {\n        i_owner = msg.sender;\n        i_minUSD = _minUSD * 1e18;\n        i_priceFeed = AggregatorV3Interface(_priceFeedAddress);\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    function fund() public payable {\n        require(\n            msg.value.getConversion(i_priceFeed) >= i_minUSD,\n            \"You need to spend more ETH\"\n        );\n        s_funders.push(msg.sender);\n        s_addressAmountMap[msg.sender] += msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        // for (uint256 i = 0; i < s_funders.length; i++) {\n        //     s_addressAmountMap[s_funders[i]] = 0;\n        // }\n        // s_funders = new address[](0);\n        // (bool callSend, ) = payable(msg.sender).call{\n        //     value: address(this).balance\n        // }(\"\");\n        // require(callSend, \"Withdrawal failed.\");\n\n        address[] memory funders = s_funders;\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            s_addressAmountMap[funder] = 0;\n        }\n        s_funders = new address[](0);\n        (bool callSend, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSend, \"Withdrawal failed.\");\n    }\n\n    function getMinimumUSD() public view returns (uint256) {\n        return i_minUSD;\n    }\n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getFunder(uint256 index) public view returns (address) {\n        return s_funders[index];\n    }\n\n    function getAddressToAmountFunded(address funder)\n        public\n        view\n        returns (uint256)\n    {\n        return s_addressAmountMap[funder];\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return i_priceFeed;\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    // get 1 eth price in usd\n    function getPriceInUSD(AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        // will get price with 8 extra zeros\n        return uint256(price * 1e10);\n    }\n\n    // get x amount of eth in usd\n    function getConversion(uint256 ethAmount, AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 priceInUSD = getPriceInUSD(priceFeed);\n        uint256 amount = (priceInUSD * ethAmount) / 1e18;\n        return amount;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}